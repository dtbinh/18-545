// megafunction wizard: %ALTFP_INV_SQRT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTFP_INV_SQRT 

// ============================================================
// File Name: altfp_inv_sqra.v
// Megafunction Name(s):
// 			ALTFP_INV_SQRT
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 12.0 Build 178 05/31/2012 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2012 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altfp_inv_sqrt CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" PIPELINE=26 ROUNDING="TO_NEAREST" WIDTH_EXP=8 WIDTH_MAN=23 aclr clock data result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altfp_inv_sqrt_and_or CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" LUT_INPUT_COUNT=4 OPERATION="OR" PIPELINE=3 WIDTH=23 aclr clken clock data result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = reg 9 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_and_or_1de
	( 
	aclr,
	clken,
	clock,
	data,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [22:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [22:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[5:0]	connection_dffe0;
	reg	[1:0]	connection_dffe1;
	reg	[0:0]	connection_dffe2;
	wire  [22:0]  connection_r0_w;
	wire  [5:0]  connection_r1_w;
	wire  [1:0]  connection_r2_w;
	wire  [0:0]  connection_r3_w;
	wire  [22:0]  operation_r1_w;
	wire  [5:0]  operation_r2_w;
	wire  [1:0]  operation_r3_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 6'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[22], operation_r1_w[19], operation_r1_w[15], operation_r1_w[11], operation_r1_w[7], operation_r1_w[3]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 2'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[5], operation_r2_w[3]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= {operation_r3_w[1]};
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		connection_r3_w = connection_dffe2,
		operation_r1_w = {(operation_r1_w[21] | connection_r0_w[22]), (operation_r1_w[20] | connection_r0_w[21]), connection_r0_w[20], (operation_r1_w[18] | connection_r0_w[19]), (operation_r1_w[17] | connection_r0_w[18]), (operation_r1_w[16] | connection_r0_w[17]), connection_r0_w[16], (operation_r1_w[14] | connection_r0_w[15]), (operation_r1_w[13] | connection_r0_w[14]), (operation_r1_w[12] | connection_r0_w[13]), connection_r0_w[12], (operation_r1_w[10] | connection_r0_w[11]), (operation_r1_w[9] | connection_r0_w[10]), (operation_r1_w[8] | connection_r0_w[9]), connection_r0_w[8], (operation_r1_w[6] | connection_r0_w[7]), (operation_r1_w[5] | connection_r0_w[6]), (operation_r1_w[4] | connection_r0_w[5]), connection_r0_w[4], (operation_r1_w[2] | connection_r0_w[3]), (operation_r1_w[1] | connection_r0_w[2]), (operation_r1_w[0] | connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[4] | connection_r1_w[5]), connection_r1_w[4], (operation_r2_w[2] | connection_r1_w[3]), (operation_r2_w[1] | connection_r1_w[2]), (operation_r2_w[0] | connection_r1_w[1]), connection_r1_w[0]},
		operation_r3_w = {(operation_r3_w[0] | connection_r2_w[1]), connection_r2_w[0]},
		result = connection_r3_w[0];
endmodule //altfp_inv_sqra_altfp_inv_sqrt_and_or_1de


//altfp_inv_sqrt_and_or CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" LUT_INPUT_COUNT=4 OPERATION="AND" PIPELINE=3 WIDTH=23 aclr clken clock data result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = reg 9 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_and_or_jfe
	( 
	aclr,
	clken,
	clock,
	data,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [22:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [22:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[5:0]	connection_dffe0;
	reg	[1:0]	connection_dffe1;
	reg	[0:0]	connection_dffe2;
	wire  [22:0]  connection_r0_w;
	wire  [5:0]  connection_r1_w;
	wire  [1:0]  connection_r2_w;
	wire  [0:0]  connection_r3_w;
	wire  [22:0]  operation_r1_w;
	wire  [5:0]  operation_r2_w;
	wire  [1:0]  operation_r3_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 6'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[22], operation_r1_w[19], operation_r1_w[15], operation_r1_w[11], operation_r1_w[7], operation_r1_w[3]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 2'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[5], operation_r2_w[3]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= {operation_r3_w[1]};
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		connection_r3_w = connection_dffe2,
		operation_r1_w = {(operation_r1_w[21] & connection_r0_w[22]), (operation_r1_w[20] & connection_r0_w[21]), connection_r0_w[20], (operation_r1_w[18] & connection_r0_w[19]), (operation_r1_w[17] & connection_r0_w[18]), (operation_r1_w[16] & connection_r0_w[17]), connection_r0_w[16], (operation_r1_w[14] & connection_r0_w[15]), (operation_r1_w[13] & connection_r0_w[14]), (operation_r1_w[12] & connection_r0_w[13]), connection_r0_w[12], (operation_r1_w[10] & connection_r0_w[11]), (operation_r1_w[9] & connection_r0_w[10]), (operation_r1_w[8] & connection_r0_w[9]), connection_r0_w[8], (operation_r1_w[6] & connection_r0_w[7]), (operation_r1_w[5] & connection_r0_w[6]), (operation_r1_w[4] & connection_r0_w[5]), connection_r0_w[4], (operation_r1_w[2] & connection_r0_w[3]), (operation_r1_w[1] & connection_r0_w[2]), (operation_r1_w[0] & connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[4] & connection_r1_w[5]), connection_r1_w[4], (operation_r2_w[2] & connection_r1_w[3]), (operation_r2_w[1] & connection_r1_w[2]), (operation_r2_w[0] & connection_r1_w[1]), connection_r1_w[0]},
		operation_r3_w = {(operation_r3_w[0] & connection_r2_w[1]), connection_r2_w[0]},
		result = connection_r3_w[0];
endmodule //altfp_inv_sqra_altfp_inv_sqrt_and_or_jfe


//altfp_inv_sqrt_and_or CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" LUT_INPUT_COUNT=4 OPERATION="OR" PIPELINE=3 WIDTH=8 aclr clken clock data result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = reg 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_and_or_kbe
	( 
	aclr,
	clken,
	clock,
	data,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [7:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [7:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	connection_dffe0;
	reg	[0:0]	connection_dffe1;
	reg	connection_dffe2;
	wire  [7:0]  connection_r0_w;
	wire  [1:0]  connection_r1_w;
	wire  [0:0]  connection_r2_w;
	wire  [7:0]  operation_r1_w;
	wire  [1:0]  operation_r2_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 2'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[7], operation_r1_w[3]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[1]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= connection_r2_w[0];
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		operation_r1_w = {(operation_r1_w[6] | connection_r0_w[7]), (operation_r1_w[5] | connection_r0_w[6]), (operation_r1_w[4] | connection_r0_w[5]), connection_r0_w[4], (operation_r1_w[2] | connection_r0_w[3]), (operation_r1_w[1] | connection_r0_w[2]), (operation_r1_w[0] | connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[0] | connection_r1_w[1]), connection_r1_w[0]},
		result = connection_dffe2;
endmodule //altfp_inv_sqra_altfp_inv_sqrt_and_or_kbe


//altfp_inv_sqrt_and_or CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" LUT_INPUT_COUNT=4 OPERATION="AND" PIPELINE=3 WIDTH=8 aclr clken clock data result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = reg 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_and_or_6ee
	( 
	aclr,
	clken,
	clock,
	data,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [7:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [7:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	connection_dffe0;
	reg	[0:0]	connection_dffe1;
	reg	connection_dffe2;
	wire  [7:0]  connection_r0_w;
	wire  [1:0]  connection_r1_w;
	wire  [0:0]  connection_r2_w;
	wire  [7:0]  operation_r1_w;
	wire  [1:0]  operation_r2_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 2'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[7], operation_r1_w[3]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[1]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= connection_r2_w[0];
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		operation_r1_w = {(operation_r1_w[6] & connection_r0_w[7]), (operation_r1_w[5] & connection_r0_w[6]), (operation_r1_w[4] & connection_r0_w[5]), connection_r0_w[4], (operation_r1_w[2] & connection_r0_w[3]), (operation_r1_w[1] & connection_r0_w[2]), (operation_r1_w[0] & connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[0] & connection_r1_w[1]), connection_r1_w[0]},
		result = connection_dffe2;
endmodule //altfp_inv_sqra_altfp_inv_sqrt_and_or_6ee


//altfp_inv_sqrt_csa CARRY_SELECT="YES" CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" DIRECTION="SUB" PIPELINE=1 REGISTER_INPUT="NO" REPRESENTATION="UNSIGNED" WIDTH=26 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_csa_k4j
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [25:0]  dataa;
	input   [25:0]  datab;
	output   [25:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [25:0]  dataa;
	tri0   [25:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_csa_lower_cout;
	wire  [12:0]   wire_csa_lower_result;
	wire  [12:0]   wire_csa_upper0_result;
	wire  [12:0]   wire_csa_upper1_result;
	wire  [25:0]  dataa_w;
	wire  [25:0]  datab_w;
	wire  [25:0]  result_w;

	lpm_add_sub   csa_lower
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.cout(wire_csa_lower_cout),
	.dataa(dataa_w[12:0]),
	.datab(datab_w[12:0]),
	.overflow(),
	.result(wire_csa_lower_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_lower.lpm_direction = "SUB",
		csa_lower.lpm_pipeline = 1,
		csa_lower.lpm_representation = "UNSIGNED",
		csa_lower.lpm_width = 13,
		csa_lower.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper0
	( 
	.aclr(aclr),
	.cin(1'b0),
	.clken(clken),
	.clock(clock),
	.cout(),
	.dataa(dataa_w[25:13]),
	.datab(datab_w[25:13]),
	.overflow(),
	.result(wire_csa_upper0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper0.lpm_direction = "SUB",
		csa_upper0.lpm_pipeline = 1,
		csa_upper0.lpm_representation = "UNSIGNED",
		csa_upper0.lpm_width = 13,
		csa_upper0.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper1
	( 
	.aclr(aclr),
	.cin(1'b1),
	.clken(clken),
	.clock(clock),
	.cout(),
	.dataa(dataa_w[25:13]),
	.datab(datab_w[25:13]),
	.overflow(),
	.result(wire_csa_upper1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper1.lpm_direction = "SUB",
		csa_upper1.lpm_pipeline = 1,
		csa_upper1.lpm_representation = "UNSIGNED",
		csa_upper1.lpm_width = 13,
		csa_upper1.lpm_type = "lpm_add_sub";
	assign
		dataa_w = dataa,
		datab_w = datab,
		result = result_w,
		result_w = {(({13{(~ wire_csa_lower_cout)}} & wire_csa_upper0_result) | ({13{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_inv_sqra_altfp_inv_sqrt_csa_k4j


//altfp_inv_sqrt_csa CARRY_SELECT="NO" CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" DIRECTION="ADD" PIPELINE=1 REGISTER_INPUT="NO" REPRESENTATION="UNSIGNED" WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_csa_rvi
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [12:0]  dataa;
	input   [12:0]  datab;
	output   [12:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [12:0]  dataa;
	tri0   [12:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [12:0]   wire_add_sub9_result;
	wire  [12:0]  dataa_w;
	wire  [12:0]  datab_w;
	wire  [12:0]  result_w;

	lpm_add_sub   add_sub9
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.cout(),
	.dataa(dataa_w),
	.datab(datab_w),
	.overflow(),
	.result(wire_add_sub9_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub9.lpm_direction = "ADD",
		add_sub9.lpm_pipeline = 1,
		add_sub9.lpm_representation = "UNSIGNED",
		add_sub9.lpm_width = 13,
		add_sub9.lpm_type = "lpm_add_sub";
	assign
		dataa_w = dataa,
		datab_w = datab,
		result = result_w,
		result_w = wire_add_sub9_result;
endmodule //altfp_inv_sqra_altfp_inv_sqrt_csa_rvi


//altfp_inv_sqrt_csa CARRY_SELECT="NO" CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV E" DIRECTION="SUB" PIPELINE=1 REGISTER_INPUT="NO" REPRESENTATION="UNSIGNED" WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_altfp_inv_sqrt 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_csa_s0j
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [12:0]  dataa;
	input   [12:0]  datab;
	output   [12:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [12:0]  dataa;
	tri0   [12:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [12:0]   wire_add_sub10_result;
	wire  [12:0]  dataa_w;
	wire  [12:0]  datab_w;
	wire  [12:0]  result_w;

	lpm_add_sub   add_sub10
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.cout(),
	.dataa(dataa_w),
	.datab(datab_w),
	.overflow(),
	.result(wire_add_sub10_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub10.lpm_direction = "SUB",
		add_sub10.lpm_pipeline = 1,
		add_sub10.lpm_representation = "UNSIGNED",
		add_sub10.lpm_width = 13,
		add_sub10.lpm_type = "lpm_add_sub";
	assign
		dataa_w = dataa,
		datab_w = datab,
		result = result_w,
		result_w = wire_add_sub10_result;
endmodule //altfp_inv_sqra_altfp_inv_sqrt_csa_s0j

//synthesis_resources = lpm_add_sub 16 lpm_mult 6 lpm_mux 1 reg 1094 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_sqra_altfp_inv_sqrt_uld
	( 
	aclr,
	clock,
	data,
	result) ;
	input   aclr;
	input   clock;
	input   [31:0]  data;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_altfp_inv_sqrt_and_or5_result;
	wire  wire_altfp_inv_sqrt_and_or6_result;
	wire  wire_altfp_inv_sqrt_and_or7_result;
	wire  wire_altfp_inv_sqrt_and_or8_result;
	wire  [25:0]   wire_diff_adder_0_result;
	wire  [25:0]   wire_diff_adder_1_result;
	wire  [12:0]   wire_slope_r1c1_add_result;
	wire  [12:0]   wire_slope_r1c2_add_result;
	wire  [12:0]   wire_slope_r1c3_add_result;
	wire  [12:0]   wire_slope_r2c1_add_result;
	wire  [12:0]   wire_slope_r2c2_add_result;
	wire  [12:0]   wire_slope_r3c1_add_result;
	reg	[12:0]	and_dffe_0;
	reg	[12:0]	and_dffe_1;
	reg	[12:0]	and_dffe_2;
	reg	[12:0]	and_dffe_3;
	reg	[12:0]	and_dffe_4;
	reg	[12:0]	and_dffe_5;
	reg	[2:0]	division_by_zero_dffe;
	reg	[7:0]	exp_dffe1_0;
	reg	[7:0]	exp_dffe1_1;
	reg	[7:0]	exp_dffe1_10;
	reg	[7:0]	exp_dffe1_11;
	reg	[7:0]	exp_dffe1_12;
	reg	[7:0]	exp_dffe1_13;
	reg	[7:0]	exp_dffe1_14;
	reg	[7:0]	exp_dffe1_15;
	reg	[7:0]	exp_dffe1_16;
	reg	[7:0]	exp_dffe1_17;
	reg	[7:0]	exp_dffe1_18;
	reg	[7:0]	exp_dffe1_19;
	reg	[7:0]	exp_dffe1_2;
	reg	[7:0]	exp_dffe1_20;
	reg	[7:0]	exp_dffe1_3;
	reg	[7:0]	exp_dffe1_4;
	reg	[7:0]	exp_dffe1_5;
	reg	[7:0]	exp_dffe1_6;
	reg	[7:0]	exp_dffe1_7;
	reg	[7:0]	exp_dffe1_8;
	reg	[7:0]	exp_dffe1_9;
	reg	[7:0]	exp_dffe2_0;
	reg	[7:0]	exp_dffe2_1;
	reg	[7:0]	exp_dffe2_2;
	reg	[2:0]	infinite_dffe;
	reg	infinite_input_dffe;
	reg	[9:0]	intercept_dffe;
	reg	[24:0]	man_dffe_0;
	reg	[24:0]	man_dffe_1;
	reg	[24:0]	man_dffe_10;
	reg	[24:0]	man_dffe_11;
	reg	[24:0]	man_dffe_12;
	reg	[24:0]	man_dffe_13;
	reg	[24:0]	man_dffe_14;
	reg	[24:0]	man_dffe_15;
	reg	[24:0]	man_dffe_16;
	reg	[24:0]	man_dffe_17;
	reg	[24:0]	man_dffe_2;
	reg	[24:0]	man_dffe_3;
	reg	[24:0]	man_dffe_4;
	reg	[24:0]	man_dffe_5;
	reg	[24:0]	man_dffe_6;
	reg	[24:0]	man_dffe_7;
	reg	[24:0]	man_dffe_8;
	reg	[24:0]	man_dffe_9;
	reg	[2:0]	nan_dffe;
	reg	nan_input_dffe;
	reg	[31:0]	result_output_dffe;
	reg	[24:0]	sign_dffe;
	reg	[12:0]	x_dffe_0;
	reg	[12:0]	x_dffe_1;
	reg	[24:0]	x_dffe_10;
	reg	[24:0]	x_dffe_11;
	reg	[24:0]	x_dffe_12;
	reg	[24:0]	x_dffe_13;
	reg	[12:0]	x_dffe_2;
	reg	[12:0]	x_dffe_3;
	reg	[12:0]	x_dffe_4;
	reg	[12:0]	x_dffe_5;
	reg	[12:0]	x_dffe_6;
	reg	[24:0]	x_dffe_7;
	reg	[24:0]	x_dffe_8;
	reg	[24:0]	x_dffe_9;
	reg	[2:0]	zero_dffe;
	reg	zero_input_dffe;
	wire  [1:0]   wire_add_sub1_result;
	wire  [6:0]   wire_add_sub3_result;
	wire  [12:0]   wire_add_sub4_result;
	wire  [8:0]   wire_bias_adjustment_result;
	wire  [48:0]   wire_inner_mult0_result;
	wire  [48:0]   wire_inner_mult1_result;
	wire  [38:0]   wire_outer_mult0_result;
	wire  [50:0]   wire_outer_mult1_result;
	wire  [25:0]   wire_sqr_mult0_result;
	wire  [49:0]   wire_sqr_mult1_result;
	wire  [15:0]   wire_mux2_result;
	wire  [31:0]  and_b0_w;
	wire  [31:0]  and_b1_w;
	wire  [31:0]  and_b2_w;
	wire  [31:0]  and_b3_w;
	wire  [31:0]  and_b4_w;
	wire  [31:0]  and_b5_w;
	wire  [6:0]  approx_c_w;
	wire  [6:0]  approx_mx_w;
	wire  [12:0]  approx_y_w;
	wire  [12:0]  c_offset_w;
	wire clk_en;
	wire  [25:0]  const_3_w;
	wire  [8:0]  const_bias_adj_eql_one_even_w;
	wire  [8:0]  const_bias_adj_eql_one_odd_w;
	wire  [8:0]  const_bias_adj_grt_one_even_w;
	wire  [8:0]  const_bias_adj_grt_one_odd_w;
	wire  [8:0]  const_bias_adj_w;
	wire  [7:0]  data_exp_bus_w;
	wire  [24:0]  data_man_bus0_w;
	wire  [24:0]  data_man_bus1_w;
	wire  [24:0]  data_man_bus_w;
	wire  data_man_mux_w;
	wire  data_sign_w;
	wire  division_by_zero_w;
	wire  exp_and_msb_w;
	wire  [7:0]  exp_bus_w;
	wire  [7:0]  exp_exc_ones_w;
	wire  [7:0]  exp_exc_zeros_w;
	wire  exp_one_w;
	wire  exp_or_msb_w;
	wire  [7:0]  exp_res_w;
	wire  exp_zero_w;
	wire  gnd_w;
	wire  [31:0]  infi_res_w;
	wire  infinite_input_w;
	wire  infinite_out_w;
	wire  infinite_w;
	wire  man_and_msb_w;
	wire  [22:0]  man_bus_w;
	wire  [22:0]  man_exc_nan_w;
	wire  [22:0]  man_exc_zeros_w;
	wire  man_non_zero_w;
	wire  man_one_w;
	wire  man_or_msb_w;
	wire  [23:0]  man_out_0_w;
	wire  [23:0]  man_out_1_w;
	wire  [22:0]  man_res_w;
	wire  man_zero_w;
	wire  [12:0]  modified_c_w;
	wire  [31:0]  mux_1_res_w;
	wire  [31:0]  mux_2_res_w;
	wire  [31:0]  mux_3_res_w;
	wire  nan_input_w;
	wire  nan_out_w;
	wire  [31:0]  nan_res_w;
	wire  nan_w;
	wire  [31:0]  norm_res_int_w;
	wire  [5:0]  selector_w;
	wire  [31:0]  shift_b0_w;
	wire  [31:0]  shift_b1_w;
	wire  [31:0]  shift_b2_w;
	wire  [31:0]  shift_b3_w;
	wire  [31:0]  shift_b4_w;
	wire  [31:0]  shift_b5_w;
	wire  sign_exc_bit_w;
	wire  sign_res_w;
	wire  [5:0]  slope_w;
	wire  [767:0]  table_bus_full_w;
	wire  vcc_w;
	wire  [12:0]  x_0_w;
	wire  [24:0]  x_1_w;
	wire  [24:0]  x_2_w;
	wire  [12:0]  x_initial_w;
	wire  zero_input_w;
	wire  [1:0]  zero_one_w;
	wire  zero_out_w;
	wire  [31:0]  zero_res_w;
	wire  zero_w;

	altfp_inv_sqra_altfp_inv_sqrt_and_or_1de   altfp_inv_sqrt_and_or5
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(man_bus_w),
	.result(wire_altfp_inv_sqrt_and_or5_result));
	altfp_inv_sqra_altfp_inv_sqrt_and_or_jfe   altfp_inv_sqrt_and_or6
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(man_bus_w),
	.result(wire_altfp_inv_sqrt_and_or6_result));
	altfp_inv_sqra_altfp_inv_sqrt_and_or_kbe   altfp_inv_sqrt_and_or7
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(exp_bus_w),
	.result(wire_altfp_inv_sqrt_and_or7_result));
	altfp_inv_sqra_altfp_inv_sqrt_and_or_6ee   altfp_inv_sqrt_and_or8
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(exp_bus_w),
	.result(wire_altfp_inv_sqrt_and_or8_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_k4j   diff_adder_0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(const_3_w[25:0]),
	.datab(wire_inner_mult0_result[47:22]),
	.result(wire_diff_adder_0_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_k4j   diff_adder_1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(const_3_w[25:0]),
	.datab(wire_inner_mult1_result[47:22]),
	.result(wire_diff_adder_1_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_rvi   slope_r1c1_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(and_dffe_0),
	.datab(and_dffe_1),
	.result(wire_slope_r1c1_add_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_rvi   slope_r1c2_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(and_dffe_2),
	.datab(and_dffe_3),
	.result(wire_slope_r1c2_add_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_rvi   slope_r1c3_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(and_dffe_4),
	.datab(and_dffe_5),
	.result(wire_slope_r1c3_add_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_rvi   slope_r2c1_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_slope_r1c1_add_result),
	.datab(wire_slope_r1c2_add_result),
	.result(wire_slope_r2c1_add_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_s0j   slope_r2c2_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(modified_c_w),
	.datab(wire_slope_r1c3_add_result),
	.result(wire_slope_r2c2_add_result));
	altfp_inv_sqra_altfp_inv_sqrt_csa_s0j   slope_r3c1_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_slope_r2c2_add_result),
	.datab(wire_slope_r2c1_add_result),
	.result(wire_slope_r3c1_add_result));
	// synopsys translate_off
	initial
		and_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_0 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_0 <= and_b0_w[30:18];
	// synopsys translate_off
	initial
		and_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_1 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_1 <= and_b1_w[30:18];
	// synopsys translate_off
	initial
		and_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_2 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_2 <= and_b2_w[30:18];
	// synopsys translate_off
	initial
		and_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_3 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_3 <= and_b3_w[30:18];
	// synopsys translate_off
	initial
		and_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_4 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_4 <= and_b4_w[30:18];
	// synopsys translate_off
	initial
		and_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_5 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_5 <= and_b5_w[30:18];
	// synopsys translate_off
	initial
		division_by_zero_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) division_by_zero_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   division_by_zero_dffe <= {division_by_zero_dffe[1:0], division_by_zero_w};
	// synopsys translate_off
	initial
		exp_dffe1_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_0 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_0 <= data_exp_bus_w;
	// synopsys translate_off
	initial
		exp_dffe1_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_1 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_1 <= exp_dffe1_0;
	// synopsys translate_off
	initial
		exp_dffe1_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_10 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_10 <= exp_dffe1_9;
	// synopsys translate_off
	initial
		exp_dffe1_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_11 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_11 <= exp_dffe1_10;
	// synopsys translate_off
	initial
		exp_dffe1_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_12 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_12 <= exp_dffe1_11;
	// synopsys translate_off
	initial
		exp_dffe1_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_13 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_13 <= exp_dffe1_12;
	// synopsys translate_off
	initial
		exp_dffe1_14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_14 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_14 <= exp_dffe1_13;
	// synopsys translate_off
	initial
		exp_dffe1_15 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_15 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_15 <= exp_dffe1_14;
	// synopsys translate_off
	initial
		exp_dffe1_16 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_16 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_16 <= exp_dffe1_15;
	// synopsys translate_off
	initial
		exp_dffe1_17 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_17 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_17 <= exp_dffe1_16;
	// synopsys translate_off
	initial
		exp_dffe1_18 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_18 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_18 <= exp_dffe1_17;
	// synopsys translate_off
	initial
		exp_dffe1_19 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_19 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_19 <= exp_dffe1_18;
	// synopsys translate_off
	initial
		exp_dffe1_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_2 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_2 <= exp_dffe1_1;
	// synopsys translate_off
	initial
		exp_dffe1_20 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_20 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_20 <= exp_dffe1_19;
	// synopsys translate_off
	initial
		exp_dffe1_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_3 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_3 <= exp_dffe1_2;
	// synopsys translate_off
	initial
		exp_dffe1_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_4 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_4 <= exp_dffe1_3;
	// synopsys translate_off
	initial
		exp_dffe1_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_5 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_5 <= exp_dffe1_4;
	// synopsys translate_off
	initial
		exp_dffe1_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_6 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_6 <= exp_dffe1_5;
	// synopsys translate_off
	initial
		exp_dffe1_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_7 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_7 <= exp_dffe1_6;
	// synopsys translate_off
	initial
		exp_dffe1_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_8 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_8 <= exp_dffe1_7;
	// synopsys translate_off
	initial
		exp_dffe1_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_9 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_9 <= exp_dffe1_8;
	// synopsys translate_off
	initial
		exp_dffe2_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2_0 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe2_0 <= wire_bias_adjustment_result[8:1];
	// synopsys translate_off
	initial
		exp_dffe2_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2_1 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe2_1 <= exp_dffe2_0;
	// synopsys translate_off
	initial
		exp_dffe2_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2_2 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe2_2 <= exp_dffe2_1;
	// synopsys translate_off
	initial
		infinite_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   infinite_dffe <= {infinite_dffe[1:0], infinite_w};
	// synopsys translate_off
	initial
		infinite_input_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_input_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_input_dffe <= (exp_one_w & man_zero_w);
	// synopsys translate_off
	initial
		intercept_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) intercept_dffe <= 10'b0;
		else if  (clk_en == 1'b1)   intercept_dffe <= wire_mux2_result[9:0];
	// synopsys translate_off
	initial
		man_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_0 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_0 <= data_man_bus_w;
	// synopsys translate_off
	initial
		man_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_1 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_1 <= man_dffe_0;
	// synopsys translate_off
	initial
		man_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_10 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_10 <= man_dffe_9;
	// synopsys translate_off
	initial
		man_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_11 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_11 <= man_dffe_10;
	// synopsys translate_off
	initial
		man_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_12 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_12 <= man_dffe_11;
	// synopsys translate_off
	initial
		man_dffe_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_13 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_13 <= man_dffe_12;
	// synopsys translate_off
	initial
		man_dffe_14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_14 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_14 <= man_dffe_13;
	// synopsys translate_off
	initial
		man_dffe_15 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_15 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_15 <= man_dffe_14;
	// synopsys translate_off
	initial
		man_dffe_16 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_16 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_16 <= man_dffe_15;
	// synopsys translate_off
	initial
		man_dffe_17 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_17 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_17 <= man_dffe_16;
	// synopsys translate_off
	initial
		man_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_2 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_2 <= man_dffe_1;
	// synopsys translate_off
	initial
		man_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_3 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_3 <= man_dffe_2;
	// synopsys translate_off
	initial
		man_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_4 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_4 <= man_dffe_3;
	// synopsys translate_off
	initial
		man_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_5 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_5 <= man_dffe_4;
	// synopsys translate_off
	initial
		man_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_6 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_6 <= man_dffe_5;
	// synopsys translate_off
	initial
		man_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_7 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_7 <= man_dffe_6;
	// synopsys translate_off
	initial
		man_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_8 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_8 <= man_dffe_7;
	// synopsys translate_off
	initial
		man_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_9 <= 25'b0;
		else if  (clk_en == 1'b1)   man_dffe_9 <= man_dffe_8;
	// synopsys translate_off
	initial
		nan_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   nan_dffe <= {nan_dffe[1:0], nan_w};
	// synopsys translate_off
	initial
		nan_input_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_input_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   nan_input_dffe <= (exp_one_w & (man_non_zero_w | man_one_w));
	// synopsys translate_off
	initial
		result_output_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) result_output_dffe <= 32'b0;
		else if  (clk_en == 1'b1)   result_output_dffe <= mux_3_res_w;
	// synopsys translate_off
	initial
		sign_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_dffe <= 25'b0;
		else if  (clk_en == 1'b1)   sign_dffe <= {sign_dffe[23:0], data_sign_w};
	// synopsys translate_off
	initial
		x_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_0 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_0 <= x_0_w;
	// synopsys translate_off
	initial
		x_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_1 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_1 <= x_dffe_0;
	// synopsys translate_off
	initial
		x_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_10 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_10 <= x_dffe_9;
	// synopsys translate_off
	initial
		x_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_11 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_11 <= x_dffe_10;
	// synopsys translate_off
	initial
		x_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_12 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_12 <= x_dffe_11;
	// synopsys translate_off
	initial
		x_dffe_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_13 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_13 <= x_dffe_12;
	// synopsys translate_off
	initial
		x_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_2 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_2 <= x_dffe_1;
	// synopsys translate_off
	initial
		x_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_3 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_3 <= x_dffe_2;
	// synopsys translate_off
	initial
		x_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_4 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_4 <= x_dffe_3;
	// synopsys translate_off
	initial
		x_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_5 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_5 <= x_dffe_4;
	// synopsys translate_off
	initial
		x_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_6 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_6 <= x_dffe_5;
	// synopsys translate_off
	initial
		x_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_7 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_7 <= x_1_w;
	// synopsys translate_off
	initial
		x_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_8 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_8 <= x_dffe_7;
	// synopsys translate_off
	initial
		x_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_9 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_9 <= x_dffe_8;
	// synopsys translate_off
	initial
		zero_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   zero_dffe <= {zero_dffe[1:0], zero_w};
	// synopsys translate_off
	initial
		zero_input_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_input_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   zero_input_dffe <= (exp_zero_w & ((man_one_w | man_non_zero_w) | man_zero_w));
	lpm_add_sub   add_sub1
	( 
	.cout(),
	.dataa(data_man_bus_w[24:23]),
	.datab(zero_one_w),
	.overflow(),
	.result(wire_add_sub1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub1.lpm_direction = "SUB",
		add_sub1.lpm_representation = "UNSIGNED",
		add_sub1.lpm_width = 2,
		add_sub1.lpm_type = "lpm_add_sub";
	lpm_add_sub   add_sub3
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.cout(),
	.dataa(approx_c_w),
	.datab(approx_mx_w),
	.overflow(),
	.result(wire_add_sub3_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub3.lpm_direction = "SUB",
		add_sub3.lpm_pipeline = 1,
		add_sub3.lpm_representation = "UNSIGNED",
		add_sub3.lpm_width = 7,
		add_sub3.lpm_type = "lpm_add_sub";
	lpm_add_sub   add_sub4
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.cout(),
	.dataa(approx_y_w),
	.datab(c_offset_w),
	.overflow(),
	.result(wire_add_sub4_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub4.lpm_direction = "SUB",
		add_sub4.lpm_pipeline = 1,
		add_sub4.lpm_representation = "UNSIGNED",
		add_sub4.lpm_width = 13,
		add_sub4.lpm_type = "lpm_add_sub";
	lpm_add_sub   bias_adjustment
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.cout(),
	.dataa(const_bias_adj_w),
	.datab({gnd_w, exp_dffe1_20}),
	.overflow(),
	.result(wire_bias_adjustment_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		bias_adjustment.lpm_direction = "SUB",
		bias_adjustment.lpm_pipeline = 1,
		bias_adjustment.lpm_representation = "UNSIGNED",
		bias_adjustment.lpm_width = 9,
		bias_adjustment.lpm_type = "lpm_add_sub",
		bias_adjustment.lpm_hint = "ONE_INPUT_IS_CONSTANT=YES";
	lpm_mult   inner_mult0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_out_0_w),
	.datab(wire_sqr_mult0_result[24:0]),
	.result(wire_inner_mult0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.sum({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		inner_mult0.lpm_pipeline = 3,
		inner_mult0.lpm_representation = "UNSIGNED",
		inner_mult0.lpm_widtha = 24,
		inner_mult0.lpm_widthb = 25,
		inner_mult0.lpm_widthp = 49,
		inner_mult0.lpm_type = "lpm_mult",
		inner_mult0.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=AUTO";
	lpm_mult   inner_mult1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_out_1_w),
	.datab(wire_sqr_mult1_result[48:24]),
	.result(wire_inner_mult1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.sum({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		inner_mult1.lpm_pipeline = 3,
		inner_mult1.lpm_representation = "UNSIGNED",
		inner_mult1.lpm_widtha = 24,
		inner_mult1.lpm_widthb = 25,
		inner_mult1.lpm_widthp = 49,
		inner_mult1.lpm_type = "lpm_mult",
		inner_mult1.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=AUTO";
	lpm_mult   outer_mult0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_diff_adder_0_result[25:0]),
	.datab(x_dffe_6),
	.result(wire_outer_mult0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.sum({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		outer_mult0.lpm_pipeline = 3,
		outer_mult0.lpm_representation = "UNSIGNED",
		outer_mult0.lpm_widtha = 26,
		outer_mult0.lpm_widthb = 13,
		outer_mult0.lpm_widthp = 39,
		outer_mult0.lpm_type = "lpm_mult",
		outer_mult0.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=AUTO";
	lpm_mult   outer_mult1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_diff_adder_1_result[25:0]),
	.datab(x_dffe_13),
	.result(wire_outer_mult1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.sum({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		outer_mult1.lpm_pipeline = 3,
		outer_mult1.lpm_representation = "UNSIGNED",
		outer_mult1.lpm_widtha = 26,
		outer_mult1.lpm_widthb = 25,
		outer_mult1.lpm_widthp = 51,
		outer_mult1.lpm_type = "lpm_mult",
		outer_mult1.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=AUTO";
	lpm_mult   sqr_mult0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(x_0_w),
	.datab(x_0_w),
	.result(wire_sqr_mult0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.sum({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		sqr_mult0.lpm_pipeline = 3,
		sqr_mult0.lpm_representation = "UNSIGNED",
		sqr_mult0.lpm_widtha = 13,
		sqr_mult0.lpm_widthb = 13,
		sqr_mult0.lpm_widthp = 26,
		sqr_mult0.lpm_type = "lpm_mult",
		sqr_mult0.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=AUTO";
	lpm_mult   sqr_mult1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(x_1_w),
	.datab(x_1_w),
	.result(wire_sqr_mult1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.sum({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		sqr_mult1.lpm_pipeline = 3,
		sqr_mult1.lpm_representation = "UNSIGNED",
		sqr_mult1.lpm_widtha = 25,
		sqr_mult1.lpm_widthb = 25,
		sqr_mult1.lpm_widthp = 50,
		sqr_mult1.lpm_type = "lpm_mult",
		sqr_mult1.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=AUTO";
	lpm_mux   mux2
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(table_bus_full_w),
	.result(wire_mux2_result),
	.sel(selector_w));
	defparam
		mux2.lpm_pipeline = 1,
		mux2.lpm_size = 48,
		mux2.lpm_width = 16,
		mux2.lpm_widths = 6,
		mux2.lpm_type = "lpm_mux";
	assign
		and_b0_w = ({32{slope_w[5]}} & shift_b0_w),
		and_b1_w = ({32{slope_w[4]}} & shift_b1_w),
		and_b2_w = ({32{slope_w[3]}} & shift_b2_w),
		and_b3_w = ({32{slope_w[2]}} & shift_b3_w),
		and_b4_w = ({32{slope_w[1]}} & shift_b4_w),
		and_b5_w = ({32{slope_w[0]}} & shift_b5_w),
		approx_c_w = 7'b1110001,
		approx_mx_w = {gnd_w, man_dffe_0[24:19]},
		approx_y_w = {wire_add_sub3_result, {6{gnd_w}}},
		c_offset_w = {{3{gnd_w}}, intercept_dffe},
		clk_en = 1'b1,
		const_3_w = 26'b11000000000000000000000000,
		const_bias_adj_eql_one_even_w = 9'b101111100,
		const_bias_adj_eql_one_odd_w = 9'b101111101,
		const_bias_adj_grt_one_even_w = 9'b101111100,
		const_bias_adj_grt_one_odd_w = 9'b101111011,
		const_bias_adj_w = (((({9{((~ man_zero_w) & (~ exp_dffe1_20[0]))}} & const_bias_adj_grt_one_even_w) | ({9{((~ man_zero_w) & exp_dffe1_20[0])}} & const_bias_adj_grt_one_odd_w)) | ({9{(man_zero_w & (~ exp_dffe1_20[0]))}} & const_bias_adj_eql_one_even_w)) | ({9{(man_zero_w & exp_dffe1_20[0])}} & const_bias_adj_eql_one_odd_w)),
		data_exp_bus_w = data[30:23],
		data_man_bus0_w = {gnd_w, vcc_w, data[22:0]},
		data_man_bus1_w = {vcc_w, data[22:0], gnd_w},
		data_man_bus_w = (({25{data_man_mux_w}} & data_man_bus0_w) | ({25{(~ data_man_mux_w)}} & data_man_bus1_w)),
		data_man_mux_w = data[23],
		data_sign_w = data[31],
		division_by_zero_w = (zero_input_w & (~ sign_dffe[21])),
		exp_and_msb_w = wire_altfp_inv_sqrt_and_or8_result,
		exp_bus_w = exp_dffe1_17,
		exp_exc_ones_w = {8{1'b1}},
		exp_exc_zeros_w = {8{1'b0}},
		exp_one_w = exp_and_msb_w,
		exp_or_msb_w = wire_altfp_inv_sqrt_and_or7_result,
		exp_res_w = exp_dffe2_2,
		exp_zero_w = (~ exp_or_msb_w),
		gnd_w = 1'b0,
		infi_res_w = {sign_exc_bit_w, exp_exc_ones_w, man_exc_zeros_w},
		infinite_input_w = infinite_input_dffe,
		infinite_out_w = infinite_dffe[2],
		infinite_w = zero_input_w,
		man_and_msb_w = wire_altfp_inv_sqrt_and_or6_result,
		man_bus_w = (({23{(~ man_dffe_17[24])}} & man_dffe_17[22:0]) | ({23{man_dffe_17[24]}} & man_dffe_17[23:1])),
		man_exc_nan_w = {vcc_w, man_exc_zeros_w[21:0]},
		man_exc_zeros_w = {23{1'b0}},
		man_non_zero_w = man_or_msb_w,
		man_one_w = man_and_msb_w,
		man_or_msb_w = wire_altfp_inv_sqrt_and_or5_result,
		man_out_0_w = man_dffe_7[24:1],
		man_out_1_w = man_dffe_17[24:1],
		man_res_w = x_2_w[22:0],
		man_zero_w = (~ man_or_msb_w),
		modified_c_w = wire_add_sub4_result[12:0],
		mux_1_res_w = (({32{infinite_out_w}} & infi_res_w) | ({32{(~ infinite_out_w)}} & norm_res_int_w)),
		mux_2_res_w = (({32{zero_out_w}} & zero_res_w) | ({32{(~ zero_out_w)}} & mux_1_res_w)),
		mux_3_res_w = (({32{nan_out_w}} & nan_res_w) | ({32{(~ nan_out_w)}} & mux_2_res_w)),
		nan_input_w = nan_input_dffe,
		nan_out_w = nan_dffe[2],
		nan_res_w = {sign_exc_bit_w, exp_exc_ones_w, man_exc_nan_w},
		nan_w = (nan_input_w | sign_dffe[21]),
		norm_res_int_w = {sign_res_w, exp_res_w, man_res_w},
		result = result_output_dffe,
		selector_w = {wire_add_sub1_result, data_man_bus_w[22:19]},
		shift_b0_w = {{2{gnd_w}}, man_dffe_0, {5{gnd_w}}},
		shift_b1_w = {{3{gnd_w}}, man_dffe_0, {4{gnd_w}}},
		shift_b2_w = {{4{gnd_w}}, man_dffe_0, {3{gnd_w}}},
		shift_b3_w = {{5{gnd_w}}, man_dffe_0, {2{gnd_w}}},
		shift_b4_w = {{6{gnd_w}}, man_dffe_0, gnd_w},
		shift_b5_w = {{7{gnd_w}}, man_dffe_0},
		sign_exc_bit_w = sign_res_w,
		sign_res_w = sign_dffe[24],
		slope_w = wire_mux2_result[15:10],
		table_bus_full_w = {16'b0010010000000011, 16'b0010010001000100, 16'b0010010010000100, 16'b0010010011000100, 16'b0010010100000100, 16'b0010100011010001, 16'b0010100100010010, 16'b0010100101010010, 16'b0010100110010010, 16'b0010110101100111, 16'b0010110110100111, 16'b0010110111100111, 16'b0011000111000010, 16'b0011001000000011, 16'b0011001001000011, 16'b0011011000100011, 16'b0011011001100100, 16'b0011011010100100, 16'b0011101010001001, 16'b0011101011001010, 16'b0011111010110011, 16'b0011111011110011, 16'b0100001011100001, 16'b0100001100100001, 16'b0100011100010010, 16'b0100101100000110, 16'b0100101101000110, 16'b0100111100111101, 16'b0101001100110110, 16'b0101011100110010, 16'b0101101100101111, 16'b0101111100101111, 16'b0110001100110001, 16'b0110011100110100, 16'b0110101100111001, 16'b0110111100111111, 16'b0111011100010000, 16'b0111111011100110, 16'b1000001011110011, 16'b1000101011001111, 16'b1001001010101111, 16'b1001111001100111, 16'b1010101000100100, 16'b1011010111101000, 16'b1100000110110001, 16'b1101000101011010, 16'b1110000100001010, 16'b1111100010000000},
		vcc_w = 1'b1,
		x_0_w = x_initial_w,
		x_1_w = {gnd_w, wire_outer_mult0_result[36:13]},
		x_2_w = {gnd_w, wire_outer_mult1_result[48:25]},
		x_initial_w = wire_slope_r3c1_add_result,
		zero_input_w = zero_input_dffe,
		zero_one_w = 2'b01,
		zero_out_w = zero_dffe[2],
		zero_res_w = {sign_exc_bit_w, exp_exc_zeros_w, man_exc_zeros_w},
		zero_w = (((~ nan_input_w) & infinite_input_w) & (~ sign_dffe[21]));
endmodule //altfp_inv_sqra_altfp_inv_sqrt_uld
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module altfp_inv_sqra (
	aclr,
	clock,
	data,
	result);

	input	  aclr;
	input	  clock;
	input	[31:0]  data;
	output	[31:0]  result;

	wire [31:0] sub_wire0;
	wire [31:0] result = sub_wire0[31:0];

	altfp_inv_sqra_altfp_inv_sqrt_uld	altfp_inv_sqra_altfp_inv_sqrt_uld_component (
				.aclr (aclr),
				.clock (clock),
				.data (data),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_HINT STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altfp_inv_sqrt"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "26"
// Retrieval info: CONSTANT: ROUNDING STRING "TO_NEAREST"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "23"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: USED_PORT: data 0 0 32 0 INPUT NODEFVAL "data[31..0]"
// Retrieval info: CONNECT: @data 0 0 32 0 data 0 0 32 0
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt.v TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt.qip TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt.bsf FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt_inst.v FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt_bb.v FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt.inc FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_sqrt.cmp FALSE TRUE
// Retrieval info: LIB_FILE: lpm
